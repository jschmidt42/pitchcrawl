// The script that should be started when the application runs.
boot_script = "scripts/lua/main"

// Package to be loaded on boot
boot_package = "boot"

// In Debug and Development configurations, autoload disables the package
// loading system and directly loads resources as needed. Disable autoload
// during development to test package file configurations and to minimize
// loaded assets.

// Note: moved to boot.package
// autoload = true

// Settings for the win32 platform
win32 = {
	window_name = "Pitchcrawl"
	floating_point_exceptions = true

	renderer = {
		screen_resolution = [ 1024, 768 ]
		//screen_resolution = [ 768, 1024 ]
		//screen_resolution = [ 2048, 1536 ]
		adapter_index = 0
		fullscreen_output = 0
		fullscreen = false
		aspect_ratio = -1
		d3d_debug = false
	}
}

error_levels = {
	// Treat semantic mismatches between vertex data and vertex shader as warnings, output warning message and ignore draw call
	semantic_mismatch = "warning"

	// Treat missing materials from .material files as warnings
	missing_material = "warning"

	// To be able to package and ship an application with missing resources you'll need to specify the fallback resources in the fallback_resource_package
	fallback_resource_package = "core/fallback_resources/fallback_resources"

	// In case a resource lookup fails, warn and fallback to specified fallback_resource
	missing_resources = {
				shader = {   fallback_resource = "missing_shader" }
				texture = {  fallback_resource = "core/fallback_resources/missing_texture" }
				unit = {     fallback_resource = "core/fallback_resources/missing_unit" }
				material = { fallback_resource = "core/fallback_resources/missing_material" }
	}
}

render_config = "core/stingray_renderer/renderer"
performance_hud = "core/performance_hud/performance_hud"

android = {
	//local_console_log = "%OBBPATH%/log.txt"
}

ios = {
	save_dir = "%SAVEDATA%/empty"
}

wwise = {
	enabled = false
}

// Settings to control the data compiler
data_compiler = {
    // Folders with this extension will be treated as single resources by
    // the compiler
    file_folder_extensions = [ ".s2d" ]

    // Files with these suffixes before the extension will automatically
    // override the originals on the specified platforms.
    resource_overrides = [
        {suffix = ".win32", platforms = ["win32"]}
        {suffix = ".ps4", platforms = ["ps4"]}
        {suffix = ".xb1", platforms = ["xb1"]}
        {suffix = ".ios", platforms = ["ios"]}
        {suffix = ".android", platforms = ["android"]}
    ]
}


stingray_version = "1.9.0.0"